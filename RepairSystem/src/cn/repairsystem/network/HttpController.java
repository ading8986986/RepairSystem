package cn.repairsystem.network;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.HashMap;import java.util.Map;import org.json.JSONException;import org.json.JSONObject;import cn.repairsystem.RepairSystemApplication;import cn.repairsystem.util.Constants;import com.android.volley.Request.Method;import com.android.volley.Response.ErrorListener;import com.android.volley.Response.Listener;import com.android.volley.AuthFailureError;import com.android.volley.VolleyError;import com.android.volley.toolbox.JsonObjectRequest;import com.android.volley.toolbox.JsonRequest;import android.content.Context;import android.util.Log;public class HttpController {	private String TAG = "HttpController";	private Context context;	private static HttpController mController;		private HttpController(Context context){		this.context = context;	}		public static HttpController getInstance(Context context) {		if(null == mController){			synchronized (HttpController.class) {				mController = new HttpController(context);			}		}		return mController;	}		public static interface HttpResultListener{		public void onResult(boolean isSuccess,JSONObject object );	}		private Map<String, String> getMyHeader(){		 Map<String, String> headers = new HashMap<String, String>();         headers.put("Cookie", "JSESSIONID=" +RepairSystemApplication.sessionId);         return headers;	}		public void login( Context context, final HttpResultListener listener,JSONObject params){		String url = Constants.LOGIN;		JsonObjectRequest loginRequest = new JsonObjectRequest(Method.POST, url, params, 				new Listener<JSONObject>(){					@Override					public void onResponse(JSONObject object) {						// TODO Auto-generated method stub						try {							if(object!= null && object.getInt("respCode") == 1){								Log.i(TAG, object.toString());								listener.onResult(true,object);							}							else {								listener.onResult(false,object);							}						} catch (JSONException e) {							// TODO Auto-generated catch block							listener.onResult(false,null);							e.printStackTrace();						}					}					}, new ErrorListener(){			@Override			public void onErrorResponse(VolleyError object) {				// TODO Auto-generated method stub				Log.e(TAG, object.toString());				listener.onResult(false,null);			}					});		RequestManager.getInstance(context.getApplicationContext())        .addToRequestQueue(loginRequest, TAG);	}		public void getRepairInfo(final HttpResultListener listener){		String url = Constants.REPAIR_INFO;//;jsessionid="+RepairSystemApplication.sessionId;		JsonObjectRequest request = new JsonObjectRequest(Method.POST, url, new JSONObject(), new Listener<JSONObject>() 				{					@Override					public void onResponse(JSONObject object) {						// TODO Auto-generated method stub						try {							if(object!= null && object.getInt("respCode") == 1){								Log.i(TAG, object.toString());								listener.onResult(true,object);							}							else {								listener.onResult(false,object);							}						} catch (JSONException e) {							// TODO Auto-generated catch block							listener.onResult(false,null);							e.printStackTrace();						}					}		}, new ErrorListener() {			@Override			public void onErrorResponse(VolleyError object) {				// TODO Auto-generated method stub				Log.e(TAG, object.toString());				listener.onResult(false,null);			}		}){			@Override			public Map<String, String> getHeaders() throws AuthFailureError {				// TODO Auto-generated method stub				return getMyHeader();			}		};						RequestManager.getInstance(context.getApplicationContext())        .addToRequestQueue(request, TAG);	}		public void getRepairedProject(final HttpResultListener listener,JSONObject param){				JsonObjectRequest request = new JsonObjectRequest(Method.POST, Constants.REPAIRED_PROJECT, param, 			new Listener<JSONObject>() {				@Override				public void onResponse(JSONObject object) {					// TODO Auto-generated method stub					try {						if(object!= null && object.getInt("respCode") == 1){							Log.i(TAG, object.toString());							listener.onResult(true,object);						}						else {							listener.onResult(false,object);						}					} catch (JSONException e) {						// TODO Auto-generated catch block						listener.onResult(false,null);						e.printStackTrace();					}				}			}, new ErrorListener() {				@Override				public void onErrorResponse(VolleyError object) {					// TODO Auto-generated method stub					Log.e(TAG, object.toString());					listener.onResult(false,null);			}		}){			@Override			public Map<String, String> getHeaders() throws AuthFailureError {				// TODO Auto-generated method stub				return getMyHeader();			}		};		RequestManager.getInstance(context.getApplicationContext())        .addToRequestQueue(request, TAG);	}	  	public void getRepairDetail(final HttpResultListener listener,JSONObject param){		JsonObjectRequest request = new JsonObjectRequest(Method.POST, Constants.REPAIR_DETAIL, param, 				new Listener<JSONObject>() {					@Override					public void onResponse(JSONObject object) {						// TODO Auto-generated method stub						try {							if(object!= null && object.getInt("respCode") == 1){								Log.i(TAG, object.toString());								listener.onResult(true,object);							}							else {								listener.onResult(false,object);							}						} catch (JSONException e) {							// TODO Auto-generated catch block							listener.onResult(false,null);							e.printStackTrace();						}					}				}, new ErrorListener() {					@Override					public void onErrorResponse(VolleyError object) {						// TODO Auto-generated method stub						Log.e(TAG, object.toString());						listener.onResult(false,null);					}				}){			@Override			public Map<String, String> getHeaders() throws AuthFailureError {				// TODO Auto-generated method stub				return getMyHeader();			}		};		RequestManager.getInstance(context.getApplicationContext())        .addToRequestQueue(request, TAG);	}		public void getRepairSubProject(final HttpResultListener listener,JSONObject param){		JsonObjectRequest request = new JsonObjectRequest(Method.POST, Constants.REPAIR_SUBPROJECT, param, 				new Listener<JSONObject>() {					@Override					public void onResponse(JSONObject object) {						// TODO Auto-generated method stub						try {							if(object!= null && object.getInt("respCode") == 1){								Log.i(TAG, object.toString());								listener.onResult(true,object);							}							else {								listener.onResult(false,object);							}						} catch (JSONException e) {							// TODO Auto-generated catch block							listener.onResult(false,null);							e.printStackTrace();						}					}				}, new ErrorListener() {					@Override					public void onErrorResponse(VolleyError object) {						// TODO Auto-generated method stub						Log.e(TAG, object.toString());						listener.onResult(false,null);					}				}){			@Override			public Map<String, String> getHeaders() throws AuthFailureError {				// TODO Auto-generated method stub				return getMyHeader();			}		};		RequestManager.getInstance(context.getApplicationContext())        .addToRequestQueue(request, TAG);	}		public void getRepairBuilding(final HttpResultListener listener,JSONObject param){		JsonObjectRequest request = new JsonObjectRequest(Method.POST, Constants.REPAIR_BUILD, param, 				new Listener<JSONObject>() {					@Override					public void onResponse(JSONObject object) {						// TODO Auto-generated method stub						try {							if(object!= null && object.getInt("respCode") == 1){								Log.i(TAG, object.toString());								listener.onResult(true,object);							}							else {								listener.onResult(false,object);							}						} catch (JSONException e) {							// TODO Auto-generated catch block							listener.onResult(false,null);							e.printStackTrace();						}					}				}, new ErrorListener() {					@Override					public void onErrorResponse(VolleyError object) {						// TODO Auto-generated method stub						Log.e(TAG, object.toString());						listener.onResult(false,null);					}				}){			@Override			public Map<String, String> getHeaders() throws AuthFailureError {				// TODO Auto-generated method stub				return getMyHeader();			}		};		RequestManager.getInstance(context.getApplicationContext())        .addToRequestQueue(request, TAG);	}			public void submit(final HttpResultListener listener,JSONObject param){		JsonObjectRequest request = new JsonObjectRequest(Method.POST, Constants.SUBMIT, param, 				new Listener<JSONObject>() {					@Override					public void onResponse(JSONObject object) {						// TODO Auto-generated method stub						try {							if(object!= null && object.getInt("respCode") == 1){								Log.i(TAG, object.toString());								listener.onResult(true,object);							}							else {								listener.onResult(false,object);							}						} catch (JSONException e) {							// TODO Auto-generated catch block							listener.onResult(false,null);							e.printStackTrace();						}					}				}, new ErrorListener() {					@Override					public void onErrorResponse(VolleyError object) {						// TODO Auto-generated method stub						Log.e(TAG, object.toString());						listener.onResult(false,null);					}				}){			@Override			public Map<String, String> getHeaders() throws AuthFailureError {				// TODO Auto-generated method stub				return getMyHeader();			}		};		RequestManager.getInstance(context.getApplicationContext())        .addToRequestQueue(request, TAG);	}				}